// <auto-generated />
using System;
using Billing.WebApi.Repositories.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Billing.WebApi.Migrations
{
    [DbContext(typeof(BillingContext))]
    [Migration("20210209173018_InitialCustomerAndComponentDataInserted")]
    partial class InitialCustomerAndComponentDataInserted
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Billing.WebApi.Repositories.Models.ComponentDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("QuantityType")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_type");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_price");

                    b.HasKey("Id");

                    b.ToTable("Component");

                    b.HasData(
                        new
                        {
                            Id = new Guid("246948a1-2810-4e0e-bf9b-945604598652"),
                            Description = "Curd",
                            QuantityType = 1,
                            UnitPrice = 800m
                        },
                        new
                        {
                            Id = new Guid("13f41001-349a-4d09-b5d7-34ac43addfb5"),
                            Description = "Milk",
                            QuantityType = 2,
                            UnitPrice = 50m
                        },
                        new
                        {
                            Id = new Guid("ce48ef77-9004-4d13-bd42-10b6a2f0cf30"),
                            Description = "Egg",
                            QuantityType = 3,
                            UnitPrice = 6m
                        },
                        new
                        {
                            Id = new Guid("e1393102-58f6-4b3c-9bd0-6f0f48f7cbdd"),
                            Description = "Butter",
                            QuantityType = 1,
                            UnitPrice = 1000m
                        },
                        new
                        {
                            Id = new Guid("0f0e69dd-785f-419a-8006-40c6d28cd26b"),
                            Description = "Flour",
                            QuantityType = 1,
                            UnitPrice = 40m
                        },
                        new
                        {
                            Id = new Guid("5ce30744-9be8-44f1-ad4b-1ed0d1cef460"),
                            Description = "Yeast",
                            QuantityType = 1,
                            UnitPrice = 200m
                        },
                        new
                        {
                            Id = new Guid("5d4f7bff-b8f1-43ae-bded-d27fe9b30140"),
                            Description = "Sugar",
                            QuantityType = 1,
                            UnitPrice = 35m
                        },
                        new
                        {
                            Id = new Guid("fdba288f-1fb5-46ac-8208-7f26e600ffa0"),
                            Description = "Salt",
                            QuantityType = 1,
                            UnitPrice = 40m
                        });
                });

            modelBuilder.Entity("Billing.WebApi.Repositories.Models.CustomerDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Phone" }, "Customer_phone_key")
                        .IsUnique();

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5b1ba6e-7c41-4eb0-af7b-1a8d35acc081"),
                            AdditionalInfo = "22 years old guy",
                            Name = "Sergey",
                            Phone = "8(800)535-35-35"
                        },
                        new
                        {
                            Id = new Guid("02a6eb94-6e00-4f96-87ce-d969a33bb0fe"),
                            AdditionalInfo = "I don't know how many years old guy",
                            Name = "Ilkin",
                            Phone = "8(900)737-37-37"
                        });
                });

            modelBuilder.Entity("Billing.WebApi.Repositories.Models.GoodComponentLinkDbo", b =>
                {
                    b.Property<Guid>("GoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("good_id");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid")
                        .HasColumnName("component_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("GoodId", "ComponentId")
                        .HasName("GoodComponent_pkey");

                    b.HasIndex("ComponentId");

                    b.ToTable("GoodComponent");
                });

            modelBuilder.Entity("Billing.WebApi.Repositories.Models.GoodDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("QuantityType")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_type");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_price");

                    b.HasKey("Id");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("Billing.WebApi.Repositories.Models.OrderDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("creation_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_status");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer")
                        .HasColumnName("payment_status");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Billing.WebApi.Repositories.Models.OrderGoodLinkDbo", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("GoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("good_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("OrderId", "GoodId")
                        .HasName("OrderGood_pkey");

                    b.HasIndex("GoodId");

                    b.ToTable("OrderGood");
                });

            modelBuilder.Entity("Billing.WebApi.Repositories.Models.GoodComponentLinkDbo", b =>
                {
                    b.HasOne("Billing.WebApi.Repositories.Models.ComponentDbo", null)
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .HasConstraintName("GoodComponent_component_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Billing.WebApi.Repositories.Models.GoodDbo", "Good")
                        .WithMany("GoodComponents")
                        .HasForeignKey("GoodId")
                        .HasConstraintName("GoodComponents_goods_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");
                });

            modelBuilder.Entity("Billing.WebApi.Repositories.Models.OrderDbo", b =>
                {
                    b.HasOne("Billing.WebApi.Repositories.Models.CustomerDbo", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("Order_customer_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Billing.WebApi.Repositories.Models.OrderGoodLinkDbo", b =>
                {
                    b.HasOne("Billing.WebApi.Repositories.Models.GoodDbo", null)
                        .WithMany()
                        .HasForeignKey("GoodId")
                        .HasConstraintName("OrderGood_good_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Billing.WebApi.Repositories.Models.OrderDbo", "Order")
                        .WithMany("OrderGoods")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("OrderGood_order_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Billing.WebApi.Repositories.Models.GoodDbo", b =>
                {
                    b.Navigation("GoodComponents");
                });

            modelBuilder.Entity("Billing.WebApi.Repositories.Models.OrderDbo", b =>
                {
                    b.Navigation("OrderGoods");
                });
#pragma warning restore 612, 618
        }
    }
}
